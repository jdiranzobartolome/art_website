/* block class for the page document and content container */
.page {
  position: absolute;
  width: 100%;
  height: 100vh;
}

.page--main-page {
  right: 0;
  top: 0;
  overflow: hidden;
}

.page-content {
  position: relative;
  width: 100%;
  height: 100%;
}

.page-content--main-page {
  display: flex;
  justify-content: center;
  align-items: center;
  background: #111;
  color: #fff;
}

/* ---------------------------- */
/* START OF GHOST IMAGE BLOCK */

.ghost-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: repeat(60, 1fr);
}

.ghost-img__ghost-element {
  /* These parameters need to be set up for the particular use, 
  using the modifiers convention
  background: [image to use]
  background-size: [size of image (similar to the size of the
                    container where .ghost-img is alocated]
  ;*/
  opacity: 0;
  filter: blur(10px);
  transform: rotate(90deg);
}

.ghost-img__ghost-element.show {
  opacity: 1;
  filter: blur(0);
  transform: rotate(0);
  /* IMPORTANT! ALWAYS INDICATE ALL TRANSITIONS IN THE SAME TRANSITION PROPERTY, OTHERWISE THEY DO NOT 
   WORK WELL, PARTICULARLY WHEN USING THE TRANSITION END EVENT!! */
  transition: opacity 0.1s ease, filter 1s ease, transform 0.5s ease;
}

/* ---------------------------------------- */
/*  START OF BUTTONS RELATED CSS DEFINITION */

/* block for circular button frame*/
.circ-btn {
  width: 50px;
  height: 50px;
  border-radius: 25px;
  cursor: pointer;
  background: radial-gradient(
    circle,
    #fff 0%,
    #ccc 50%,
    rgba(0, 0, 0, 0.8) 100%
  );
}

/* Line elements  */
.circ-btn__line {
  position: absolute;
  top: 50%;
  left: 50%;
  /* transform: translate(-50%, -50%); */
  width: 28px;
  height: 3px;
  background: #000;
  transition: all 0.5s ease-out;
}

/* Modifiers for defining how the line elements of the circular button are presented (defines type of button).
"circ-btn--close-open" */
.circ-btn--close-open .circ-btn__line:first-of-type {
  transform: translate(-50%, -50%) rotate(90deg);
}

.circ-btn--close-open .circ-btn__line:first-of-type.close {
  transform: translate(-50%, -50%) rotate(-315deg);
}

.circ-btn--close-open .circ-btn__line:last-of-type.close {
  transform: translate(-50%, -50%) rotate(135deg);
}

/* cic-btn--arrow  */
.circ-btn--arrow .circ-btn__line:first-of-type {
  transform: translate(-45%, 175%) rotate(-30deg);
}

.circ-btn--arrow .circ-btn__line:last-of-type {
  transform: translate(-45%, -245%) rotate(30deg);
}

/* Modifier for defining the orientation of the button (mostly for having the arrow pointing to all four directions) */
/* Right is the default class but still I think it is good to write it down here and in html too. */
.circ-btn--right {
  /* Does not do anything, default direction */
}

.circ-btn--up {
  -webkit-transform: rotate(-90deg);
  -moz-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -o-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.circ-btn--left {
  -webkit-transform: rotate(-180deg);
  -moz-transform: rotate(-180deg);
  -ms-transform: rotate(-180deg);
  -o-transform: rotate(-180deg);
  transform: rotate(-180deg);
}

.circ-btn--down {
  -webkit-transform: rotate(-270deg);
  -moz-transform: rotate(-270deg);
  -ms-transform: rotate(-270deg);
  -o-transform: rotate(-270deg);
  transform: rotate(-270deg);
}

/*  END OF BUTTONS RELATED CSS DEFINITION */
/* ---------------------------------------- */

/*  START OF BACKGROUND VIDEOS, BACKGROUND IMAGES, AND OVERLAYS RELATED CSS DEFINITION */
.bg-vid {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.bg-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* ---------------------------------------- */
/* START OF THE SMART VIDEO MENU BLOCK AND ITS ELEMENTS DEFINITION */
/* Background video block */

/* smart video menu block is only a div which will contain all the elements comprising the smart video menu.
Its only requisite is the difinition of the type of positioning for the inner elements. Then, with modifiers, 
the smart video menu needs to be placed and made as big as desires.
NOTE: It could be made more modular by having the inner item list as a block too (so the smart vid menu can be used 
with list of items created in different manner, not only like a row flex, like here. However, I think that might 
start making things to complicated, so, for now, I will have the definition of the item-list being part of the 
smart video menu itself (an element forming part of it)*/
.smart-vid-menu {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.smart-vid-menu__bg-video {
  opacity: 0.8;
}

.smart-vid-menu__overlay {
  opacity: 0;
  transition: opacity 0.75s ease;
  background-color: #111;
  z-index: 100;
  pointer-events: none;
}

.smart-vid-menu__items {
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-around;
  list-style: none;
}

.smart-vid-menu__item {
  transition: transform 1.5s ease;
  padding: 10px;
}

/* recuerda, las transform no pueden ser a inline elements, no puedes hacerlo al "a" directamente */
.smart-vid-menu__item:hover {
  transform: scale(1.1);
  z-index: 101;
}

.smart-vid-menu__link {
  /* we need to give a position value different to static for z-index to take effect */
  position: relative;
  outline: 0;
  text-decoration: none;
  font-family: Parisienne;
  font-size: 55px;
  font-weight: 900;
  color: #fff;
  cursor: pointer;
  opacity: 1;
  z-index: 10;
  transition: opacity 1s ease;
}

/* END OF THE SMART VIDEO MENU BLOCK AND ITS ELEMENTS DEFINITION */
/* ---------------------------------------- */

/* Defining of some blocks which can be combined if desired. One is a block
which just is defined as an overlay of the div it is contained in, simple.
So any overlayed div will use this. It is actually the same as ".overlay" but
I think it is better to differentiate for easiness of comprehension, specially
when reading the HTML. And .over-block act as a block, inside it there will be 
other blocks or elements. And ".overlay" is just an overlay that will be used
mostly for modifying visuals and transparency by changing its opacity,
left-side and right-side are blocks which need to be used together. 
When placed both under a div, they will divide it in two and for two different
half-parts. */

/* ------------------------------------ */
/* overlay-block and left-side, right-side block definitions */

.overlay-block {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.left-side,
.right-side {
  /* you can create two easy columns with float: left and 
  50% of width and setting height for both children of a parent.
  Position relative is given so inner elements or blocks can be 
  positioned absolute. This is a common procedure I will follow
  with this BEM-inspired modular layout */
  position: relative;
  float: left;
  width: 50%;
  height: 100%;
}

/* Ending of overlay-block and left-side, right-side block definitions */
/* ------------------------------------ */

/* ------------------------------ */
/*  START OF ITEM LIST BLOCK  */

.item-list {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr 2fr;
  grid-column-gap: 20px;
  align-items: stretch;
  justify-content: stretch;
}

.item-list__header {
  position: relative;
  flex-grow: 2;
  height: 100%;
}

/* Not the best way of doing this, since first the h3 will be looked for.
It might be better to use another class name. But then in BEM I would have 
and element inside an element?  */

.item-list__header h3 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 60px;
  text-align: center;
  justify-content: center;
  color: #fff;
}

.item-list__items {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  justify-items: stretch;
  align-items: stretch;
}

.item {
  overflow: hidden;
}

.item__main-img,
.item__secondary-img {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 5px;
}

.item__main-img img {
  cursor: pointer;
}

.item__secondary-img img {
  padding: 5px;
  cursor: pointer;
  border-bottom: 2px solid rgba(255, 255, 255, 0.6);
  border-top: 2px solid rgba(255, 255, 255, 0.6);
}

.item-list__controls {
  width: 100%;
  /*height: 70px;*/
  opacity: 1;
  background-color: #111;
  border-bottom-left-radius: 30px;
  border-bottom-right-radius: 30px;
  /* z-index: 10; */
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px;
}

.item-list__controls img:first-child {
  padding-right: 15px;
  height: 40px;
  transform: scaleX(-1);
  cursor: pointer;
}

.item-list__controls img:last-child {
  height: 40px;
  padding-left: 15px;
  cursor: pointer;
}

/* Cuidado con los espacios. NO ES LO MISMO .arrow-right .hidden, QUE arror-right.hidden; */
.item-list__controls img:first-child.hidden,
.item-list__controls img:last-child.hidden {
  /* Using visibility, and not only changing opacity to 0, makes the object not clickable.*/
  visibility: hidden !important;
}

/* END OF ITEM LIST BLOCK  */
/* ---------------------------- */

/* MEDIA QUERIES */

/* This is for media queries. For now leave them here, at the bottom. 
Until you refractor the code with BEM. Then let's think */
/* @media (min-width: 1084px) {
  .smart-vid-menu__link {
    font-size: 65px;
  }
} */

/* General transfomrational classes */
.hidden {
  opacity: 0;
}

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* MAIN PAGE PARTICULARS */
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* FILM PAGE PARTICULARS */
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

/*  START OF ITEM-INFO BLOCK */

.item-info {
  opacity: 1;
  transition: opacity 0.5s ease-out;
  width: 90%;
  height: 70%;
  background: rgba(0, 0, 0, 0.7);
  border-radius: 10px;
  position: absolute;
  top: 60%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 99999;
}

.item-info.hidden {
  opacity: 0;
}

.item-info-container {
  width: 95%;
  height: 95%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border-radius: 15px;
  color: #000;
  background: rgba(0, 0, 0, 0.3);
  overflow: auto;
  align-content: center;
}

.item-info-container .div {
  text-align: center;
}

.item-info-container__primary-info h1 {
  font-size: 60px;
  font-family: "Times New Roman", Times, serif;
  text-align: center;
  padding-top: 10px;
}

.item-info-container__primary-info h2 {
  font-size: 25px;
  text-align: center;
}

.item-info-container__primary-info h3 {
  font-size: 20px;
  font-family: "Times New Roman", Times, serif;
  text-align: end;
  padding-right: 15px;
  margin-bottom: 5px;
}

.item-info-containter__secondary_info {
  padding: 15px;
  padding-top: 0px;
}

.item-info-containter__secondary_info h3 {
  text-align: center;
  font-size: 30px;
  margin-bottom: 5px;
  font-family: "Times New Roman", Times, serif;
}

.item-info-containter__secondary_info p {
  font-size: 15px;
  text-align: justify;
  font-family: Arial, Helvetica, sans-serif;
  padding: 15px;
  border-radius: 10px;
  background: rgba(0, 0, 0, 0.3);
  line-height: 20px;
}

/* END OF ITEM INFO BLOCK */

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* BOOK PAGE PARTICULARS */
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

/*  Book page  (I THINK BETTER DOING IT BY GENERAL BLOCKS, AND THEN BY PAGE */
.page--book-page {
  /* DUDA: is this position absolute really needed?  */
  position: absolute;
  top: -100vh;
  left: 0;
}

.bg-vid--book-page {
  opacity: 0.65;
  /* Mirroring the video */
  transform: scaleX(-1);
}

.bookshelf__overlayer {
  position: absolute;
  top: 60px;
  left: 0;
  width: 100%;
  height: 500px;
  opacity: 0.7;
}

.bookshelf .overlayer {
  position: absolute;
  top: 60px;
  left: 0;
  width: 100%;
  height: 500px;
  opacity: 0.7;
}

.bookshelf__overlayer img {
  width: 100%;
  height: 100%;
  border-radius: 30px;
}

.bookshelf__controls {
  position: absolute;
  top: 510px;
  left: 0;
  width: 100%;
  height: 70px;
  opacity: 1;
  background-color: #111;
  border-bottom-left-radius: 30px;
  border-bottom-right-radius: 30px;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
}

.bookshelf__controls img:first-child {
  padding-right: 20px;
  height: 40px;
  transform: scaleX(-1);
}

.bookshelf__controls img:last-child {
  height: 40px;
  padding-left: 20px;
}

.bookshelf__shelf {
  /* defining the width and height overrides the flex:1, so now the flex item from the right
  will ocupy more space than the left as the screen becomes smaller. It is okay, though, 
  since it is what we want */
  position: absolute;
  top: 70px;
  left: 50%;
  transform: translateX(-50%);
  width: 426px;
  height: 440px;
  background: url(./img/book-page/bookshelf.gif);
  background-size: contain;
  z-index: 1;
}
